<launch>
  <arg name="launch_moveit" default="true" />
  <arg name="launch_teleop" default="true" />
  <arg name="launch_move_base" default="true" />
  <arg name="launch_sound_play" default="true" />
  <arg name="launch_insta360" default="true" />
  <arg name="boot_sound" default="false" />
  <arg name="map_frame" default="eng2" />
  <arg name="map_file" default="$(find jsk_maps)/raw_maps/eng2-7f-0.05.yaml"/>
  <arg name="keepout_map_file" default="$(find jsk_maps)/raw_maps/eng2-7f-0.05_keepout.yaml" />
  <arg name="use_keepout" default="true" />

  <param name="robot/type" value="fetch" />
  <param name="robot/name" command='bash -c "hostname | xargs echo -n"' />

  <include file="$(find jsk_fetch_startup)/jsk_fetch.machine" />

  <!-- add jsk startups -->
  <node pkg="jsk_fetch_startup" name="battery_warning" type="battery_warning.py"
        respawn="true" output="screen">
    <rosparam>
      duration: 180
      charge_level_threshold: 40.0
      charge_level_step: 10.0
    </rosparam>
  </node>

  <node pkg="jsk_robot_startup" name="nav_speak" type="nav_speak.py" respawn="true" >
    <rosparam>
      lang: japanese
    </rosparam>
  </node>
  <node if="$(arg boot_sound)" pkg="jsk_fetch_startup" name="boot_sound" type="boot_sound.py" />

  <!-- look at human for Fetch -->
  <node name="look_at_human"
        pkg="jsk_fetch_startup" type="fetch-look-at-human.l" output="screen">
    <remap from="~input/people_pose_array" to="/edgetpu_human_pose_estimator/output/poses"/>
  </node>

  <!-- insta360 air images -->
  <include file="$(find jsk_fetch_startup)/launch/fetch_insta360_$(env ROS_DISTRO).launch"
           if="$(arg launch_insta360)" />

  <!-- english speach node -->
  <!-- disable sound_play in julius.launch and place it in fetch_bringup.launch -->
  <!-- see: https://github.com/jsk-ros-pkg/jsk_robot/pull/1140 -->
  <node name="sound_play" pkg="sound_play" type="soundplay_node.py"
        respawn="true" if="$(arg launch_sound_play)" />

  <!-- japanese speech node -->
  <include file="$(find voice_text)/launch/voice_text.launch">
    <arg name="launch_sound_play" value="$(arg launch_sound_play)" />
    <arg name="sound_play_respawn" value="true" />
  </include>

  <!-- Buffer Server -->
  <node pkg="tf2_ros" type="buffer_server" name="tf2_buffer_server" output="screen">
    <param name="buffer_size" value="120.0"/>
  </node>

  <!-- logging -->
  <include file="$(find jsk_fetch_startup)/launch/fetch_lifelog.xml">
    <arg name="map_frame" value="$(arg map_frame)" />
    <arg name="vital_check" value="false" />
  </include>

  <!-- diagnostic aggregator -->
  <node pkg="diagnostic_aggregator" type="aggregator_node"
        name="diag_agg" args="CPP" output="screen" >
    <rosparam command="load" file="$(find jsk_fetch_startup)/config/fetch_analyzers.yaml" />
  </node>

  <!-- publish CPU status to diagnostics -->
  <node name="cpu_monitor" pkg="pr2_computer_monitor" type="cpu_monitor.py"
        args="--diag-hostname=my_machine" >
    <param name="check_ipmi_tool" value="false" type="bool" />
    <param name="enforce_clock_speed" value="false" type="bool" />
    <param name="num_cores" value="-1" type="int" />
    <param name="load1_threshold" value="7.0"/>
    <param name="load5_threshold" value="5.0"/>
  </node>

  <!-- twitter -->
  <include file="$(find jsk_fetch_startup)/launch/fetch_tweet.launch" />

  <!-- app manager -->
  <include file="$(find jsk_robot_startup)/lifelog/app_manager.launch">
    <arg name="use_applist" value="true" />
    <arg name="applist" value="$(find jsk_fetch_startup)/apps"/>
    <arg name="respawn" value="false" />
  </include>

  <!-- downsample / throttle sensor data -->
  <include file="$(find jsk_fetch_startup)/launch/fetch_sensors.xml" >
    <arg name="launch_manager" value="false"/>
  </include>

  <!-- include fetch moveit -->
  <group if="$(arg launch_moveit)">
    <include file="$(find fetch_moveit_config)/launch/move_group.launch" />
    <!-- overwrite fetch.srdf -->
    <!-- The semantic description that corresponds to the URDF -->
    <param name="robot_description_semantic"
           command="rosrun xacro xacro --inorder $(find jsk_fetch_startup)/launch/moveit/fetch.srdf.xacro" />
  </group>

  <!-- teleop -->
  <include file="$(find jsk_fetch_startup)/launch/fetch_teleop.xml"
           if="$(arg launch_teleop)" />

  <!-- speech recognition -->
  <node name="respeaker_transformer" pkg="tf" type="static_transform_publisher"
        args="0 0 0.1 0 0 0 head_pan_link respeaker_base 100"/>
  <!-- disable sound_play in julius.launch and place it in fetch_bringup.launch -->
  <!-- see: https://github.com/jsk-ros-pkg/jsk_robot/pull/1140 -->
  <include file="$(find julius_ros)/launch/julius.launch">
    <arg name="launch_audio_capture" value="false"/>
    <arg name="launch_sound_play" value="false"/>
    <arg name="speech_to_text_topic" value="speech_to_text_julius"/>
  </include>
  <include file="$(find respeaker_ros)/launch/sample_respeaker.launch">
    <arg name="publish_tf" default="false"/>
    <arg name="launch_soundplay" default="false"/>
    <arg name="audio" value="speech_audio"/>
    <arg name="speech_to_text" value="speech_to_text_google"/>
    <arg name="language" value="ja-JP"/>
  </include>
  <!-- set fetch speak action server names -->
  <!-- this parameter is for speech_to_text node in respeaker_ros -->
  <!-- https://github.com/jsk-ros-pkg/jsk_3rdparty/pull/168 -->
  <group ns="speech_to_text">
    <rosparam>
       tts_action_names:
         - sound_play
         - robotsound_jp
    </rosparam>
  </group>

  <group if="$(arg launch_move_base)">
    <!-- jsk_maps -->
    <include file="$(find jsk_maps)/launch/start_map_$(arg map_frame).launch">
      <arg name="launch_map_server" value="true" />
      <arg name="keepout" value="$(arg use_keepout)" />
    </include>

    <!-- dock localization -->
    <node pkg="jsk_fetch_startup" type="correct_position.py" name="correct_position" respawn="true" />

    <!-- include fetch_navigation -->
    <include file="$(find fetch_navigation)/launch/fetch_nav.launch" >
      <arg name="map_file" value="$(arg map_file)" />
      <arg name="map_keepout_file" value="$(arg keepout_map_file)" />
      <arg name="use_keepout" value="$(arg use_keepout)" />
      <arg name="use_map_topic" value="true" />
      <arg name="launch_map_server" value="false" />
    </include>

    <!-- load amcl params -->
    <rosparam command="load"
              file="$(find jsk_fetch_startup)/launch/navigation/fetch_amcl_common_params.yaml" />
    <rosparam command="load"
              file="$(find jsk_fetch_startup)/launch/navigation/fetch_amcl_$(env ROS_DISTRO)_params.yaml" />
    <!-- load move_base params -->
    <rosparam command="load"
              file="$(find jsk_fetch_startup)/launch/navigation/fetch_move_base_common_params.yaml" />
    <rosparam command="load"
              file="$(find jsk_fetch_startup)/launch/navigation/fetch_move_base_$(env ROS_DISTRO)_params.yaml" />
  </group>

  <!-- /imu has no frame_id information and there is no bug fix release in indigo. -->
  <!-- see https://github.com/fetchrobotics/fetch_ros/issues/70 -->
  <node name="imu_corrector" pkg="jsk_fetch_startup" type="imu_corrector.py">
    <remap from="~input" to="/imu" />
    <remap from="~output" to="/imu_corrected" />
  </node>

  <!-- /odom has no covariance value. -->
  <node name="odom_corrector" pkg="jsk_fetch_startup" type="odom_corrector.py">
    <remap from="~input" to="/odom" />
    <remap from="~output" to="/odom_corrected" />
  </node>
</launch>
